{"ast":null,"code":"import _regeneratorRuntime from \"/home/amateo/repo/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/amateo/repo/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/amateo/repo/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/amateo/repo/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/amateo/repo/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/amateo/repo/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/amateo/repo/blockchain-developer-bootcamp/src/components/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Navbar from '../components/Navbar';\nimport Content from './Content';\nimport { loadWeb3, loadAccount, loadNetworkId, loadToken, loadExchange } from '../store/interactions';\nimport { contractsLoadedSelector } from '../store/selectors';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadBlockchainData(this.props.dispatch);\n    }\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n        var web3, networkId, token;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                web3 = loadWeb3(dispatch);\n                _context.next = 3;\n                return web3.eth.net.getNetworkType();\n\n              case 3:\n                _context.next = 5;\n                return loadNetworkId(web3, dispatch);\n\n              case 5:\n                networkId = _context.sent;\n                _context.next = 8;\n                return loadAccount(web3, dispatch);\n\n              case 8:\n                token = loadToken(web3, networkId, dispatch);\n                loadExchange(web3, networkId, dispatch);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadBlockchainData(_x) {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nfunction mapStateToProps(state) {\n  console.log('contractloaded?', contractsLoadedSelector(state));\n  return {};\n}\n\nexport default connect(mapStateToProps)(App);","map":{"version":3,"sources":["/home/amateo/repo/blockchain-developer-bootcamp/src/components/App.js"],"names":["React","Component","connect","Navbar","Content","loadWeb3","loadAccount","loadNetworkId","loadToken","loadExchange","contractsLoadedSelector","App","loadBlockchainData","props","dispatch","web3","eth","net","getNetworkType","networkId","token","mapStateToProps","state","console","log"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,aAAhC,EAA+CC,SAA/C,EAA0DC,YAA1D,QAA8E,uBAA9E;AACA,SAASC,uBAAT,QAAwC,oBAAxC;;IAGMC,G;;;;;;;;;;;;;WACJ,6BAAoB;AAClB,WAAKC,kBAAL,CAAwB,KAAKC,KAAL,CAAWC,QAAnC;AACD;;;;yFAED,iBAAyBA,QAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,gBAAAA,IADR,GACeV,QAAQ,CAACS,QAAD,CADvB;AAAA;AAAA,uBAEQC,IAAI,CAACC,GAAL,CAASC,GAAT,CAAaC,cAAb,EAFR;;AAAA;AAAA;AAAA,uBAG0BX,aAAa,CAACQ,IAAD,EAAOD,QAAP,CAHvC;;AAAA;AAGQK,gBAAAA,SAHR;AAAA;AAAA,uBAIQb,WAAW,CAACS,IAAD,EAAOD,QAAP,CAJnB;;AAAA;AAKQM,gBAAAA,KALR,GAKgBZ,SAAS,CAACO,IAAD,EAAOI,SAAP,EAAkBL,QAAlB,CALzB;AAMEL,gBAAAA,YAAY,CAACM,IAAD,EAAOI,SAAP,EAAkBL,QAAlB,CAAZ;;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WASA,kBAAS;AACP,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;;;;EArBeb,S;;AAwBlB,SAASoB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bd,uBAAuB,CAACY,KAAD,CAAtD;AACA,SAAO,EAAP;AAED;;AACD,eAAepB,OAAO,CAACmB,eAAD,CAAP,CAAyBV,GAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Navbar from '../components/Navbar';\nimport Content from './Content';\n\nimport { loadWeb3, loadAccount, loadNetworkId, loadToken, loadExchange } from '../store/interactions';\nimport { contractsLoadedSelector } from '../store/selectors';\n\n\nclass App extends Component {\n  componentDidMount() {\n    this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n    const web3 = loadWeb3(dispatch)\n    await web3.eth.net.getNetworkType()\n    const networkId = await loadNetworkId(web3, dispatch)\n    await loadAccount(web3, dispatch)\n    const token = loadToken(web3, networkId, dispatch)\n    loadExchange(web3, networkId, dispatch)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Content />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log('contractloaded?', contractsLoadedSelector(state))\n  return {\n  }\n}\nexport default connect(mapStateToProps)(App);\n"]},"metadata":{},"sourceType":"module"}