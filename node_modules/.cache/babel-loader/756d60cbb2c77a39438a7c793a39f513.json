{"ast":null,"code":"import _regeneratorRuntime from \"/home/amateo/repo/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/amateo/repo/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\nimport { web3Loaded, web3AccountLoaded, networkIdLoaded, tokenLoaded } from \"./actions\";\nimport Token from '../abis/Token.json';\nexport var loadWeb3 = function loadWeb3(dispatch) {\n  var web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');\n  dispatch(web3Loaded(web3));\n  return web3;\n};\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(web3, dispatch) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3.eth.getAccounts();\n\n          case 2:\n            accounts = _context.sent;\n            account = accounts[0];\n            dispatch(web3AccountLoaded(account));\n            return _context.abrupt(\"return\", account);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadAccount(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadToken = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, networkId, dispatch) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            token = web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n            dispatch(tokenLoaded(token));\n            return _context2.abrupt(\"return\", token);\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            window.alert('Token contract not deployed to the current network. Please select another network with Metamask.');\n            return _context2.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 6]]);\n  }));\n\n  return function loadToken(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadNetworkId = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(web3, dispatch) {\n    var networkId;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return web3.eth.net.getId();\n\n          case 2:\n            networkId = _context3.sent;\n            dispatch(networkIdLoaded(networkId));\n            return _context3.abrupt(\"return\", networkId);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function loadNetworkId(_x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/amateo/repo/blockchain-developer-bootcamp/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","networkIdLoaded","tokenLoaded","Token","loadWeb3","dispatch","web3","givenProvider","loadAccount","eth","getAccounts","accounts","account","loadToken","networkId","token","Contract","abi","networks","address","window","alert","loadNetworkId","net","getId"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,eAAxC,EAAyDC,WAAzD,QAA4E,WAA5E;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AAClC,MAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASA,IAAI,CAACS,aAAL,IAAsB,uBAA/B,CAAb;AACAF,EAAAA,QAAQ,CAACN,UAAU,CAACO,IAAD,CAAX,CAAR;AACA,SAAOA,IAAP;AACH,CAJM;AAMP,OAAO,IAAME,WAAW;AAAA,sEAAG,iBAAOF,IAAP,EAAaD,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACAC,IAAI,CAACG,GAAL,CAASC,WAAT,EADA;;AAAA;AACjBC,YAAAA,QADiB;AAEjBC,YAAAA,OAFiB,GAEPD,QAAQ,CAAC,CAAD,CAFD;AAGvBN,YAAAA,QAAQ,CAACL,iBAAiB,CAACY,OAAD,CAAlB,CAAR;AAHuB,6CAIhBA,OAJgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB;AAOP,OAAO,IAAMK,SAAS;AAAA,uEAAG,kBAAOP,IAAP,EAAaQ,SAAb,EAAwBT,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXU,YAAAA,KAFW,GAEHT,IAAI,CAACG,GAAL,CAASO,QAAT,CAAkBb,KAAK,CAACc,GAAxB,EAA6Bd,KAAK,CAACe,QAAN,CAAeJ,SAAf,EAA0BK,OAAvD,CAFG;AAGjBd,YAAAA,QAAQ,CAACH,WAAW,CAACa,KAAD,CAAZ,CAAR;AAHiB,8CAIVA,KAJU;;AAAA;AAAA;AAAA;AAMjBK,YAAAA,MAAM,CAACC,KAAP,CAAa,kGAAb;AANiB,8CAOV,IAPU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATR,SAAS;AAAA;AAAA;AAAA,GAAf;AAWP,OAAO,IAAMS,aAAa;AAAA,uEAAG,kBAAOhB,IAAP,EAAaD,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDC,IAAI,CAACG,GAAL,CAASc,GAAT,CAAaC,KAAb,EADC;;AAAA;AACnBV,YAAAA,SADmB;AAEzBT,YAAAA,QAAQ,CAACJ,eAAe,CAACa,SAAD,CAAhB,CAAR;AAFyB,8CAGlBA,SAHkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbQ,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import Web3 from \"web3\"\nimport { web3Loaded, web3AccountLoaded, networkIdLoaded, tokenLoaded } from \"./actions\"\nimport Token from '../abis/Token.json';\n\nexport const loadWeb3 = (dispatch) => {\n    const web3 = new Web3(Web3.givenProvider || 'http://localhost:7545')\n    dispatch(web3Loaded(web3))\n    return web3\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n    const accounts = await web3.eth.getAccounts()\n    const account = accounts[0]\n    dispatch(web3AccountLoaded(account))\n    return account\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n    try {\n        const token = web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n        dispatch(tokenLoaded(token))\n        return token\n    } catch (error) {\n        window.alert('Token contract not deployed to the current network. Please select another network with Metamask.')\n        return null\n    }\n}\n\nexport const loadNetworkId = async (web3, dispatch) => {\n    const networkId = await web3.eth.net.getId()\n    dispatch(networkIdLoaded(networkId))\n    return networkId\n}"]},"metadata":{},"sourceType":"module"}